covid_bardata <- tapply(Alldata$cases, Alldata$date, FUN=sum)
covid_bardata <- as.data.frame(covid_bardata)
names(covid_bardata)[1] <- "cases"
covid_bardata$date <- rownames(covid_bardata)
covid_bardata$date <- as.factor(covid_bardata$date)
location1 <- grep(mydate, covid_bardata$date)
covid_bardata <- covid_bardata[location1:nrow(covid_bardata),]
covid_bardata$dailycase[1] <- 0
#covid_bardata$average5[1] <- covid_bardata$dailycase[1]
for (myvar in seq(1:nrow(covid_bardata))) {
if (myvar > 1) {
covid_bardata$dailycase[myvar] <- (covid_bardata$cases[myvar] -  covid_bardata$cases[myvar-1])
}
}
for (myvar in seq(1:nrow(covid_bardata))) {
if (myvar < 7) {
covid_bardata$average7[myvar] <- mean(covid_bardata$dailycase[1:myvar])
}
else {
covid_bardata$average7[myvar] <- mean(covid_bardata$dailycase[(myvar-6):(myvar)])
}
}
myplot2<-ggplot(data=covid_bardata, aes(x=date, y=dailycase))+
geom_bar(stat="identity", width= 0.8) + scale_x_discrete(breaks = covid_bardata$date[c(T,F,F,F,F,F,F,F)])
myplot<-ggplot(data=covid_bardata, aes(x=date, group=1 ))+
geom_bar(aes(y=dailycase), stat="identity", width= 0.5, color="darkorange", fill="pink") +
geom_line(aes(y = average7), stat="identity", color="red", size=1.2) +
scale_x_discrete(breaks = covid_bardata["date"][seq(1, nrow(covid_bardata), 15),]) +
theme(aspect.ratio= 0.5)
tmap_mode("plot")
# us spData set (us_states...)
# basic map plotting using spData us_states data set using tmap package
us_states_map <- tm_shape(us_states, projection = 2163) + tm_polygons() +
tm_layout(frame = FALSE)
us_states_map
us_hawaii_map = tm_shape(hawaii, projection = 2163) + tm_polygons()
us_hawaii_map
us_alaska_map = tm_shape(alaska, projection = 2163) + tm_polygons()
us_alaska_map
library(tigris)
library(dplyr)
# using tmap and tigris package (census data map) # see the manual for tigris data
us_geomap <- states(class="sf") # import feature data only using states() of the tigris package
tm_shape(us_geomap, projection = 2163) + tm_polygons()  # this will show Alaska and Hawaii together
#plot county map
my_usstates <- us_states[c("GEOID", "NAME")]  # us_states is the dataset of spData package
# Hawaii and Alaska are seperate datasets of the package
us_geomap_ct <- counties(class="sf", cb=TRUE) # import feature data only
us_geomap_ct <- subset(us_geomap_ct, us_geomap_ct[["STATEFP"]] %in% my_usstates$GEOID)
#select the continuous us states (excluding Hawaii, Alaska, and other islands.)
# if you want MD only..
#us_geomap_ct <- subset(us_geomap_ct, us_geomap_ct[["STATEFP"]] %in% "24")
visited <- runif(nrow(us_geomap_ct), min=0, max=20)
visited = floor(visited+0.5)
us_geomap_ct$visited <- visited
tm_shape(us_geomap_ct, projection = 2163) + tm_polygons("visited") #+ tm_text("NAME", size = 9/10)
library(sf)
#library(raster)
library(dplyr)
library(spData)
library(tigris)
#library(spDataLarge)
library(tmap)    # for static and interactive maps
library(tmaptools)
library(usmap)
#library(leaflet) # for interactive maps
#library(mapview)
library(ggplot2)
tmap_mode("plot")
# us spData set (us_states...)
# basic map plotting using spData us_states data set using tmap package
us_states_map <- tm_shape(us_states, projection = 2163) + tm_polygons() +
tm_layout(frame = FALSE)
us_states_map
us_hawaii_map = tm_shape(hawaii, projection = 2163) + tm_polygons()
us_hawaii_map
us_alaska_map = tm_shape(alaska, projection = 2163) + tm_polygons()
us_alaska_map
library(tigris)
library(dplyr)
# using tmap and tigris package (census data map) # see the manual for tigris data
us_geomap <- states(class="sf") # import feature data only using states() of the tigris package
tm_shape(us_geomap, projection = 2163) + tm_polygons()  # this will show Alaska and Hawaii together
#plot county map
my_usstates <- us_states[c("GEOID", "NAME")]  # us_states is the dataset of spData package
# Hawaii and Alaska are seperate datasets of the package
us_geomap_ct <- counties(class="sf", cb=TRUE) # import feature data only
us_geomap_ct <- subset(us_geomap_ct, us_geomap_ct[["STATEFP"]] %in% my_usstates$GEOID)
#select the continuous us states (excluding Hawaii, Alaska, and other islands.)
# if you want MD only..
#us_geomap_ct <- subset(us_geomap_ct, us_geomap_ct[["STATEFP"]] %in% "24")
visited <- runif(nrow(us_geomap_ct), min=0, max=20)
visited = floor(visited+0.5)
us_geomap_ct$visited <- visited
tm_shape(us_geomap_ct, projection = 2163) + tm_polygons("visited") #+ tm_text("NAME", size = 9/10)
fileconnect1 <- url("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
Alldata <- read.table(fileconnect1, sep =",", header = TRUE, encoding="UTF-8", quote = "\"")
head(Alldata)  # check if county names include numeric values
mydate <- "2020-05-30"
mddata <- subset(Alldata, state=="Maryland" & date ==mydate)
dedata <- subset(Alldata, state=="Delaware" & date ==mydate)
alldata <-subset(Alldata, date ==mydate)
alldata$NAME <- alldata$county
save(Alldata, alldata, mddata, dedata, mydate, file="Data/All_covid19_data.RData")
my_usstates <- us_states[c("GEOID", "NAME")]  # us_states is the dataset of spData package
statecase <- tapply(alldata$cases, alldata$state, FUN=sum)  # calculate total case by state
statecase <- as.data.frame(statecase)
statecase$NAME <- rownames(statecase)
statecase <- subset(statecase, NAME %in% my_usstates$NAME)
my_usstates_covid19 <- merge(my_usstates, statecase, by="NAME")
maxcase <- max(statecase$statecase)
maxcase <- (ceiling(maxcase/100000))*100000
mybreaks <- seq(from=1, to = maxcase, by=50000)
breakLength <- length(mybreaks)
#textname <- c("1 to 80,000", "80,001 to 160,000", "160,001 to 240,000", "240,001 to 320,000" )
tmap_mode("plot")
tm_shape(my_usstates_covid19, projection = 2163) +
tm_fill("statecase", palette = brewer.pal(breakLength, "Blues"), alpha=1, title="Covid19 5-26-2020",
breaks = mybreaks, labels = textname) +
tm_borders("black") + tm_text("statecase",  size = 3/5) #  + tm_text(textname)
#tm_scale_bar(color.dark="blue", color.light="white")
tm_shape(my_usstates_covid19, projection = 2163) +
tm_fill("statecase", palette = brewer.pal(breakLength, "Blues"), alpha=1, title="Covid19 5-26-2020",
breaks = mybreaks) +
tm_borders("black") + tm_text("statecase",  size = 3/5) #  + tm_text(textname)
#tm_scale_bar(color.dark="blue", color.light="white")
# use the grDevices native color map
tm_shape(my_usstates_covid19, projection = 2163) +
tm_fill("statecase", palette = rev(heat.colors(breakLength, alpha=1)), alpha=1, title="Covid19 5-26-2020",
breaks = mybreaks) +
tm_borders("black") + tm_text("statecase",  size = 3/5) #  + tm_text(textname)
#tm_scale_bar(color.dark="blue", color.light="white")
# Add covid 19 data to county maps
tmap_mode("plot")
# do not plot. takes too long in a slow computer
starttime<-Sys.time()
tm_shape(us_geomap48_covid, projection = 2163) +
tm_fill("cases", title="Covid19 5-28-2020", breaks = seq(from=0, to = maxcase, by=5000)) +
tm_borders("black")
endtime<-Sys.time()
endtime - starttime
tmap_mode("plot")
us_states_map <- tm_shape(us_states, projection = 2163) + tm_polygons() +
tm_layout(frame = FALSE)
us_states_map
us_hawaii_map = tm_shape(hawaii, projection = 2163) + tm_polygons()
us_hawaii_map
us_alaska_map = tm_shape(alaska, projection = 2163) + tm_polygons()
us_alaska_map
library(tmap)    # for static and interactive maps
library(tmaptools)
#library(leaflet) #
install.packages("xml2")
install.packages(c("tmap", "tmaptools"))
tmap_mode("plot")
us_states_map <- tm_shape(us_states, projection = 2163) + tm_polygons() +
tm_layout(frame = FALSE)
us_states_map
us_hawaii_map = tm_shape(hawaii, projection = 2163) + tm_polygons()
us_hawaii_map
us_alaska_map = tm_shape(alaska, projection = 2163) + tm_polygons()
us_alaska_map
environment()
view()
View()
help(View)
View
View()
View(alldata)
View(alldata)
library()
library()
data()
library(sf)
#library(raster)
library(dplyr)
library(spData)
library(tigris)
#library(spDataLarge)
library(tmap)    # for static and interactive maps
library(tmaptools)
library(usmap)
#library(leaflet) # for interactive maps
#library(mapview)
library(ggplot2)
library(plotly)
# add Covid-19 data
cat('Downloading data from the NYT data repository...\n')
fileconnect1 <- url("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
Alldata <- read.table(fileconnect1, sep =",", header = TRUE, encoding="UTF-8", quote = "\"")
cat('Done downloading.\n')
head(Alldata)  # check if county names include numeric values
mydate <- "2020-03-01"
#mddata <- subset(Alldata, state=="Maryland" & date ==mydate)
#dedata <- subset(Alldata, state=="Delaware" & date ==mydate)
#Alldata$date <-as.factor(Alldata$date)
covid_bardata <- tapply(Alldata$cases, Alldata$date, FUN=sum)
covid_bardata <- as.data.frame(covid_bardata)
names(covid_bardata)[1] <- "cases"
covid_bardata$date <- rownames(covid_bardata)
covid_bardata$date <- as.factor(covid_bardata$date)
location1 <- grep(mydate, covid_bardata$date)
covid_bardata <- covid_bardata[location1:nrow(covid_bardata),]
covid_bardata$dailycase[1] <- 0
#covid_bardata$average5[1] <- covid_bardata$dailycase[1]
for (myvar in seq(1:nrow(covid_bardata))) {
if (myvar > 1) {
covid_bardata$dailycase[myvar] <- (covid_bardata$cases[myvar] -  covid_bardata$cases[myvar-1])
}
}
for (myvar in seq(1:nrow(covid_bardata))) {
if (myvar < 7) {
covid_bardata$average7[myvar] <- mean(covid_bardata$dailycase[1:myvar])
}
else {
covid_bardata$average7[myvar] <- mean(covid_bardata$dailycase[(myvar-6):(myvar)])
}
}
myplot2<-ggplot(data=covid_bardata, aes(x=date, y=dailycase))+
geom_bar(stat="identity", width= 0.8) + scale_x_discrete(breaks = covid_bardata$date[c(T,F,F,F,F,F,F,F)])
myplot<-ggplot(data=covid_bardata, aes(x=date, group=1 ))+
geom_bar(aes(y=dailycase), stat="identity", width= 0.5, color="darkorange", fill="pink") +
geom_line(aes(y = average7), stat="identity", color="red", size=1.2) +
scale_x_discrete(breaks = covid_bardata["date"][seq(1, nrow(covid_bardata), 15),]) +
theme(aspect.ratio= 0.5)
mmyplot
mmyplot2
install.packages("plotly")
library(sf)
#library(raster)
library(dplyr)
library(spData)
library(tigris)
#library(spDataLarge)
library(tmap)    # for static and interactive maps
library(tmaptools)
library(usmap)
#library(leaflet) # for interactive maps
#library(mapview)
library(ggplot2)
library(plotly)
library(sf)
#library(raster)
library(dplyr)
library(spData)
library(tigris)
#library(spDataLarge)
library(tmap)    # for static and interactive maps
library(tmaptools)
library(usmap)
#library(leaflet) # for interactive maps
#library(mapview)
library(ggplot2)
library(plotly)
install.packages("data.table")
data()
library(sf)
#library(raster)
library(dplyr)
library(spData)
library(tigris)
#library(spDataLarge)
library(tmap)    # for static and interactive maps
library(tmaptools)
library(usmap)
#library(leaflet) # for interactive maps
#library(mapview)
library(ggplot2)
library(plotly)
library(sf)
#library(raster)
library(dplyr)
library(spData)
library(tigris)
#library(spDataLarge)
library(tmap)    # for static and interactive maps
library(tmaptools)
library(usmap)
#library(leaflet) # for interactive maps
#library(mapview)
library(ggplot2)
tmap_mode("plot")
# us spData set (us_states...)
# basic map plotting using spData us_states data set using tmap package
us_states_map <- tm_shape(us_states, projection = 2163) + tm_polygons() +
tm_layout(frame = FALSE)
us_states_map
us_hawaii_map = tm_shape(hawaii, projection = 2163) + tm_polygons()
us_hawaii_map
us_alaska_map = tm_shape(alaska, projection = 2163) + tm_polygons()
us_alaska_map
library(tigris)
library(dplyr)
# using tmap and tigris package (census data map) # see the manual for tigris data
us_geomap <- states(class="sf") # import feature data only using states() of the tigris package
tm_shape(us_geomap, projection = 2163) + tm_polygons()  # this will show Alaska and Hawaii together
library(tigris)
library(dplyr)
# using tmap and tigris package (census data map) # see the manual for tigris data
us_geomap <- states(class="sf") # import feature data only using states() of the tigris package
tm_shape(us_geomap, projection = 2163) + tm_polygons()  # this will show Alaska and Hawaii together
my_usstates <- us_states[c("GEOID", "NAME")]  # us_states is the dataset of spData package
# Hawaii and Alaska are seperate datasets of the package
us_geomap_ct <- counties(class="sf", cb=TRUE) # import feature data only
us_geomap_ct <- subset(us_geomap_ct, us_geomap_ct[["STATEFP"]] %in% my_usstates$GEOID)
#select the continuous us states (excluding Hawaii, Alaska, and other islands.)
us_geomap_ct <- subset(us_geomap_ct, us_geomap_ct[["STATEFP"]] %in% my_usstates$GEOID)
#select the continuous us states (excluding Hawaii, Alaska, and other islands.)
us_geomap_ct
# if you want MD only..
#us_geomap_ct <- subset(us_geomap_ct, us_geomap_ct[["STATEFP"]] %in% "24")
visited <- runif(nrow(us_geomap_ct), min=0, max=20)
visited = floor(visited+0.5)
us_geomap_ct$visited <- visited
tm_shape(us_geomap_ct, projection = 2163) + tm_polygons("visited") #+ tm_text("NAME", size = 9/10)
fileconnect1 <- url("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
Alldata <- read.table(fileconnect1, sep =",", header = TRUE, encoding="UTF-8", quote = "\"")
head(Alldata)  # check if county names include numeric values
mydate <- "2020-05-30"
mddata <- subset(Alldata, state=="Maryland" & date ==mydate)
dedata <- subset(Alldata, state=="Delaware" & date ==mydate)
alldata <-subset(Alldata, date ==mydate)
alldata$NAME <- alldata$county
save(Alldata, alldata, mddata, dedata, mydate, file="Data/All_covid19_data.RData")
my_usstates <- us_states[c("GEOID", "NAME")]  # us_states is the dataset of spData package
statecase <- tapply(alldata$cases, alldata$state, FUN=sum)  # calculate total case by state
statecase <- as.data.frame(statecase)
statecase$NAME <- rownames(statecase)
statecase <- subset(statecase, NAME %in% my_usstates$NAME)
my_usstates_covid19 <- merge(my_usstates, statecase, by="NAME")
maxcase <- max(statecase$statecase)
maxcase <- (ceiling(maxcase/100000))*100000
mybreaks <- seq(from=1, to = maxcase, by=50000)
breakLength <- length(mybreaks)
#textname <- c("1 to 80,000", "80,001 to 160,000", "160,001 to 240,000", "240,001 to 320,000" )
tmap_mode("plot")
# manuall set the legend labels
tm_shape(my_usstates_covid19, projection = 2163) +
tm_fill("statecase", palette = brewer.pal(breakLength, "Blues"), alpha=1, title="Covid19 5-26-2020",
breaks = mybreaks, labels = textname) +
tm_borders("black") + tm_text("statecase",  size = 3/5) #  + tm_text(textname)
#tm_scale_bar(color.dark="blue", color.light="white")
# manuall set the legend labels
tm_shape(my_usstates_covid19, projection = 2163) +
tm_fill("statecase", palette = brewer.pal(breakLength, "Blues"), alpha=1, title="Covid19 5-26-2020",
breaks = mybreaks, labels = textname) +
tm_borders("black") + tm_text("statecase",  size = 3/5) #  + tm_text(textname)
install.packages("RColorBrewer")
setwd("/Volumes/SharedVolume/OneDrive/R/R_Mapping")
# manuall set the legend labels
tm_shape(my_usstates_covid19, projection = 2163) +
tm_fill("statecase", palette = brewer.pal(breakLength, "Blues"), alpha=1, title="Covid19 5-26-2020",
breaks = mybreaks, labels = textname) +
tm_borders("black") + tm_text("statecase",  size = 3/5) #  + tm_text(textname)
library(sf)
#library(raster)
library(dplyr)
library(spData)
library(tigris)
#library(spDataLarge)
library(tmap)    # for static and interactive maps
library(tmaptools)
library(usmap)
#library(leaflet) # for interactive maps
#library(mapview)
library(ggplot2)
tmap_mode("plot")
# us spData set (us_states...)
# basic map plotting using spData us_states data set using tmap package
us_states_map <- tm_shape(us_states, projection = 2163) + tm_polygons() +
tm_layout(frame = FALSE)
us_states_map
us_hawaii_map = tm_shape(hawaii, projection = 2163) + tm_polygons()
us_hawaii_map
us_alaska_map = tm_shape(alaska, projection = 2163) + tm_polygons()
us_alaska_map
library(tigris)
library(dplyr)
library(RColorBrewer)
# using tmap and tigris package (census data map) # see the manual for tigris data
us_geomap <- states(class="sf") # import feature data only using states() of the tigris package
tm_shape(us_geomap, projection = 2163) + tm_polygons()  # this will show Alaska and Hawaii together
my_usstates <- us_states[c("GEOID", "NAME")]  # us_states is the dataset of spData package
# Hawaii and Alaska are seperate datasets of the package
us_geomap_ct <- counties(class="sf", cb=TRUE) # import feature data only
us_geomap_ct <- subset(us_geomap_ct, us_geomap_ct[["STATEFP"]] %in% my_usstates$GEOID)
#select the continuous us states (excluding Hawaii, Alaska, and other islands.)
visited <- runif(nrow(us_geomap_ct), min=0, max=20)
visited = floor(visited+0.5)
us_geomap_ct$visited <- visited
tm_shape(us_geomap_ct, projection = 2163) + tm_polygons("visited") #+ tm_text("NAME", size = 9/10)
fileconnect1 <- url("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
Alldata <- read.table(fileconnect1, sep =",", header = TRUE, encoding="UTF-8", quote = "\"")
head(Alldata)  # check if county names include numeric values
mydate <- "2020-05-30"
mddata <- subset(Alldata, state=="Maryland" & date ==mydate)
dedata <- subset(Alldata, state=="Delaware" & date ==mydate)
alldata <-subset(Alldata, date ==mydate)
alldata$NAME <- alldata$county
save(Alldata, alldata, mddata, dedata, mydate, file="Data/All_covid19_data.RData")
my_usstates <- us_states[c("GEOID", "NAME")]  # us_states is the dataset of spData package
statecase <- tapply(alldata$cases, alldata$state, FUN=sum)  # calculate total case by state
statecase <- as.data.frame(statecase)
statecase$NAME <- rownames(statecase)
statecase <- subset(statecase, NAME %in% my_usstates$NAME)
my_usstates_covid19 <- merge(my_usstates, statecase, by="NAME")
maxcase <- max(statecase$statecase)
maxcase <- (ceiling(maxcase/100000))*100000
mybreaks <- seq(from=1, to = maxcase, by=50000)
breakLength <- length(mybreaks)
#textname <- c("1 to 80,000", "80,001 to 160,000", "160,001 to 240,000", "240,001 to 320,000" )
tmap_mode("plot")
# manuall set the legend labels
tm_shape(my_usstates_covid19, projection = 2163) +
tm_fill("statecase", palette = brewer.pal(breakLength, "Blues"), alpha=1, title="Covid19 5-26-2020",
breaks = mybreaks, labels = textname) +
tm_borders("black") + tm_text("statecase",  size = 3/5) #  + tm_text(textname)
#tm_scale_bar(color.dark="blue", color.light="white")
textname <- c("1 to 80,000", "80,001 to 160,000", "160,001 to 240,000", "240,001 to 320,000" )
tmap_mode("plot")
# manuall set the legend labels
tm_shape(my_usstates_covid19, projection = 2163) +
tm_fill("statecase", palette = brewer.pal(breakLength, "Blues"), alpha=1, title="Covid19 5-26-2020",
breaks = mybreaks, labels = textname) +
tm_borders("black") + tm_text("statecase",  size = 3/5) #  + tm_text(textname)
#tm_scale_bar(color.dark="blue", color.light="white")
library(sf)
#library(raster)
library(dplyr)
library(spData)
library(tigris)
#library(spDataLarge)
library(tmap)    # for static and interactive maps
library(tmaptools)
library(usmap)
#library(leaflet) # for interactive maps
#library(mapview)
library(ggplot2)
#library(shiny)
# dev.cur() # shows the current graphic devices
# dev.off() # delete current output graphic device
# png("filename.png") or jpeg(...) or windows()... redirect the graphic output
# pdf(...)
# dev.off() will clear the graphic output device
# using tmap library
tmap_mode("plot")
# us spData set (us_states...)
# basic map plotting using spData us_states data set using tmap package
us_states_map <- tm_shape(us_states, projection = 2163) + tm_polygons() +
tm_layout(frame = FALSE)
us_states_map
us_hawaii_map = tm_shape(hawaii, projection = 2163) + tm_polygons()
us_hawaii_map
us_alaska_map = tm_shape(alaska, projection = 2163) + tm_polygons()
us_alaska_map
library(tmap)    # for static and interactive maps
setwd("/Volumes/SharedVolume/OneDrive/R/R_Mapping")
library(sf)
#library(raster)
library(dplyr)
library(spData)
library(tigris)
#library(spDataLarge)
library(tmap)    # for static and interactive maps
library(tmaptools)
library(usmap)
#library(leaflet) # for interactive maps
#library(mapview)
library(ggplot2)
library(plotly)
# add Covid-19 data
cat('Downloading data from the NYT data repository...\n')
fileconnect1 <- url("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
Alldata <- read.table(fileconnect1, sep =",", header = TRUE, encoding="UTF-8", quote = "\"")
cat('Done downloading.\n')
head(Alldata)  # check if county names include numeric values
mydate <- "2020-03-01"
#mddata <- subset(Alldata, state=="Maryland" & date ==mydate)
#dedata <- subset(Alldata, state=="Delaware" & date ==mydate)
#Alldata$date <-as.factor(Alldata$date)
covid_bardata <- tapply(Alldata$cases, Alldata$date, FUN=sum)
covid_bardata <- as.data.frame(covid_bardata)
names(covid_bardata)[1] <- "cases"
covid_bardata$date <- rownames(covid_bardata)
covid_bardata$date <- as.factor(covid_bardata$date)
location1 <- grep(mydate, covid_bardata$date)
covid_bardata <- covid_bardata[location1:nrow(covid_bardata),]
covid_bardata$dailycase[1] <- 0
#covid_bardata$average5[1] <- covid_bardata$dailycase[1]
for (myvar in seq(1:nrow(covid_bardata))) {
if (myvar > 1) {
covid_bardata$dailycase[myvar] <- (covid_bardata$cases[myvar] -  covid_bardata$cases[myvar-1])
}
}
for (myvar in seq(1:nrow(covid_bardata))) {
if (myvar < 7) {
covid_bardata$average7[myvar] <- mean(covid_bardata$dailycase[1:myvar])
}
else {
covid_bardata$average7[myvar] <- mean(covid_bardata$dailycase[(myvar-6):(myvar)])
}
}
myplot2<-ggplot(data=covid_bardata, aes(x=date, y=dailycase))+
geom_bar(stat="identity", width= 0.8) + scale_x_discrete(breaks = covid_bardata$date[c(T,F,F,F,F,F,F,F)])
mmyplot2
myplot2
myplot<-ggplot(data=covid_bardata, aes(x=date, group=1 ))+
geom_bar(aes(y=dailycase), stat="identity", width= 0.5, color="darkorange", fill="pink") +
geom_line(aes(y = average7), stat="identity", color="red", size=1.2) +
scale_x_discrete(breaks = covid_bardata["date"][seq(1, nrow(covid_bardata), 15),]) +
theme(aspect.ratio= 0.5)
myplot
